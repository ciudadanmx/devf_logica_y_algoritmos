// Detectar el entorno: Node (sin window) o navegador (con window), si fypeof window es igual a undefinied isNode ser√° verdadero
const isNode = typeof window === 'undefined';
//declara rl para m√°s adelante usarlo para guardar las preguntas cuando la interfase sea node.js
let rl = null;

// Crea la lista de compras vac√≠a
let listaDeCompras = [];

// Funci√≥n para agregar un producto a la lista
const agregarProducto = (producto) => {
    //verifica que el producto no est√© ya repetido en la lista
    if (!listaDeCompras.includes(producto)) {
    //si no est√° repetido con push lo inserta al final de la lista    
    listaDeCompras.push(producto);
    //muestra en consola el resultado, en el caso de node mediante consola y en el caso del navegador mediante un alert
    if (isNode) {
      console.log(`‚úÖ Producto "${producto}" agregado a la lista.`);
    } else {
      alert(`‚úÖ Producto "${producto}" agregado a la lista.`);
    }
    //si el producto est√° repetido no lo agrega pero muestra en consola o en alert seg√∫n la interfase.
  } else {
    if (isNode) {
      console.log(`‚ö†Ô∏è El producto "${producto}" ya est√° en la lista.`);
    } else {
      alert(`‚ö†Ô∏è El producto "${producto}" ya est√° en la lista.`);
    }
  }
};

// Funci√≥n para eliminar un producto de la lista, se pasa la cadena de texto con el nombre del producto como par√°metro de la funci√≥n flecha
const eliminarProducto = (producto) => {
  //se busca y si existe obtiene la posici√≥n del producto dentro de la lista 
  const index = listaDeCompras.indexOf(producto);
  //si encuentra la coincidencia con splice retira el elemento con la posici√≥n index
  if (index !== -1) {
    listaDeCompras.splice(index, 1);
    //muestra el resultado en la interfase correspondiente.
    if (isNode) {
      console.log(`üóëÔ∏è   Producto "${producto}" eliminado de la lista.`);
    } else {
      alert(`üóëÔ∏è   Producto "${producto}" eliminado de la lista.`);
    }
    //si el producto no se encuentra pues no hay nada que eliminar y muestra el resultado en la interfase.
  } else {
    if (isNode) {
      console.log(`‚ùå El producto "${producto}" no se encuentra en la lista.`);
    } else {
      alert(`‚ùå El producto "${producto}" no se encuentra en la lista.`);
    }
  }
};

// Funci√≥n para mostrar la lista de compras
const mostrarLista = () => {
   //verifica que la lista no est√© vac√≠a, si est√° vac√≠a lo muestra en la interfase.
  if (listaDeCompras.length === 0) {
    if (isNode) {
      console.log("üõí La lista de compras est√° vac√≠a.");
    } else {
      alert("üõí La lista de compras est√° vac√≠a.");
    }
    //si la lista tiene elementos mediante un foreach muestra cada uno de los productos en listaDeCompras por cada uno de sus correspondientes index
  } else {
    if (isNode) {
      console.log('************');
      console.log("üìù Lista de Compras:");
      listaDeCompras.forEach((producto, index) => {
        //muestra la posici√≥n del elemento en la lista (index + 1) y a continuaci√≥n el producto.
        console.log(`${index + 1}. ${producto}`);
      });
      console.log('************');
    //se formatea la lista par apoderla mostrar en un alert, se concatena todo agregando saltos de l√≠nea para que cada producto inicie en nueva l√≠nea en el alert en el navegador.
    } else {
      let listaStr = "üìù Lista de Compras:\n";
      listaDeCompras.forEach((producto, index) => {
        listaStr += `${index + 1}. ${producto}\n`;
      });
      alert(listaStr);
    }
  }
};

// Funci√≥n para mostrar el men√∫ (en consola c/ node.js se usa console.log)
const mostrarMenu = () => {
  if (isNode) {
    console.log("\n¬øQu√© acci√≥n deseas realizar?");
    console.log("1. ‚ûï Agregar un producto");
    console.log("2. ‚ûñ Eliminar un producto");
    console.log("3. üõí Mostrar la lista");
    console.log("4. ‚ùå Salir");
  }
};

// Funci√≥n principal para gestionar la lista de compras, si es node se usa switch case para evitar ciclos y condicionales anidados, facilitando el manejo con readline
const gestionarLista = () => {
  if (isNode) {
    mostrarMenu();
    rl.question("Selecciona una opci√≥n: ", (opcion) => {
      switch (opcion) {
        case '1':
          rl.question("Ingresa el nombre del producto a agregar: ", (producto) => {
            agregarProducto(producto);
            gestionarLista(); // Volvemos a llamar para otra acci√≥n
          });
          break;
        case '2':
          rl.question("Ingresa el nombre del producto a eliminar: ", (producto) => {
            eliminarProducto(producto);
            gestionarLista(); // Volvemos a llamar para otra acci√≥n
          });
          break;
        case '3':
          mostrarLista();
          gestionarLista();  // Volvemos a llamar para otra acci√≥n
          break;
        case '4':
          console.log("üëã Happy Hacking ¬°Ziaoo!");
          //se finaliza readline
          rl.close();
          //se libera el prompt terminando la ejecuci√≥n
          break;
        //opci√≥n por defecto que sucede si el usuario ingresa alguna opci√≥n que no sea las anteriores  
        default:
          console.log("‚ùå Opci√≥n no v√°lida. Intenta de nuevo.");
          gestionarLista();
          break;
      }
    });
    //gesti√≥n del men√∫ cuando la interfase es el navegador, de igual modo se concatena para el alert y se usa el retorno de l√≠nea
  } else {
    const opcion = prompt(
      "¬øQu√© acci√≥n deseas realizar?\n" +
      "1. ‚ûï Agregar un producto\n" +
      "2. ‚ûñ Eliminar un producto\n" +
      "3. üõí Mostrar la lista\n" +
      "4. ‚ùå Salir"
    );
    switch (opcion) {
      case '1': {
          const producto = prompt("Ingresa el nombre del producto a agregar:");
          agregarProducto(producto);
          gestionarLista();
          break;
      }
      case '2': {
          const producto = prompt("Ingresa el nombre del producto a eliminar:");
          eliminarProducto(producto);
          gestionarLista();
          break;
      }
      case '3':
          mostrarLista();
          gestionarLista();
          break;
      case '4':
          alert("üëã Happy Hacking ¬°Ziaoo!");
          break;
      default:
          alert("‚ùå Opci√≥n no v√°lida. Intenta de nuevo.");
          gestionarLista();
          break;
    }
  }
};

//Esta parte la hice con Chat GPT porque no pod√≠a hacer funcionar readLine y alerts del navegador a la vez, pero tras varios intentos usando la funci√≥n "razona", al fin lo logr√≥ üòÅ
// En funci√≥n del entorno, iniciamos la gesti√≥n
if (isNode) {
  // En Node, usamos una IIFE as√≠ncrona para poder utilizar await en la importaci√≥n
  (async () => {
    const readlineModule = await import('readline');
    rl = readlineModule.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    gestionarLista();
  })();
} else {
  // En el navegador, iniciamos directamente
  gestionarLista();
}
//finalmente en ambos casos al final ejecuta la funci√≥n gestionarLista que a su vez en ciclo cada vez que termina un subciclo se vuelve a iniciar, se llama a s√≠ misma de nuevo, solo que en el caso de node a parte tiene que importar readline pero ah√≠ algo pasaba que se tiene que hacer como m√≥dulo ac√° y en el index.